 Overview of the map/reduce 'programming model' in distributed systems

 # Origin of the phrase lies in the Lisp functions 'map' and 'reduce': map an operation such as '+'
   across a list to get the sum
   ## Pseudo-lisp example:  (map + (1 2 3 4)) ==> 10

   ## A better name might be 'scatter/gather': 
      ### Scatter the work to be done, then gather the results together, reducing the results
          to an appropriate value  (e.g., a single list, one number, etc.).
	  
      ### Scatter work across various hosts, then gather results from these hosts: distributed computing.	  

   ## Pioneered by a pair of Google engineers (http://research.google.com/archive/mapreduce.html).
      ### The map/reduce programming model is designed to process large data sets.

   ## The Apache Hadoop project and open-source software (https://hadoop.apache.org/) is popular.

 # Consider four (human) editors compiling an index for a 200-page book:

   ## They divide the book into four 50-page segments, with one editor assigned to each segment.

   ## Each editor compiles a list in which there's a term-to-be-indexed (e.g., 'concurrent') and
      the pages on which it occurs.
      ### The term acts as a 'key', the list of pages as the key's 'value'.

      For example:                       key        value (the list)

         Editor1 (pages 1-50):       concurrent: 4,18,32,43,44,48
         Editor2 (pages 51-100):     concurrent: 54,65,76,89,90
         Editor3 (pages 101-150):    concurrent: 110,132,133
         Editor4 (pages 151-200):    concurrent: 162,176,187,199

   ## The 'scattered' (partial) indexes now must be aggregated into a single index. 
      ## The key is still 'concurrent', but the 'value' now consists of the aggregated page references:

                       1                2            3             4           ## From which editor?
                 /            \    /         \    /      \    /          \
   concurrent:  4,18,32,43,44,48,54,65,76,89,90,110,132,133,162,176,187,199    ## Key = 'concurrent',
                                                                                  value = merged list of pages

      ## The aggregation might be done in steps (e.g., results from Editor1-Editor2, results from Editor3-Editor4,
         then a final aggregation).

     
