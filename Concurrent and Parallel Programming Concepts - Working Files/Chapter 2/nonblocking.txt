  A first look at non-blocking I/O: two code examples

 # A blocking 'getItem' (read) example
 
    <!doctype html>
    <html>
      <head>
        <title>Blocking I/O</title>
        <script>
          localStorage.name = 'Flintstone';             <!-- line 1 -->
          alert('Before blocking call');                <!-- line 2 -->
          var value = localStorage.getItem('name');     <!-- line 3 -->
          alert('After blocking call: ' + value);       <!-- line 4 -->
        </script>
      </head>
      <body/>
    </html>

    ## The second alert occurs only after the blocking call to 'getItem' (line 3) returns.

 # A non-blocking 'fetch' example in pseudo-code

    define callbackFunction(Http-response) {
       productList = extractProductListFromResponse(Http-response)
       print(productList)                            ## print is blocking
    }

    // Main code 
    url = 'http://some-machine.org/some-script-to-get-data'
    connection = getConnectionToRemoteMachine(url)
    connection.fetch(callbackFunction)                   ## fetch(...) is non-blocking
    print('Hello, world!')                               ## print is blocking
    print('Goodbye, cruel world!')                       ## print is blocking
 

